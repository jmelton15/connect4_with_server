pipeline {
    agent any

    environment {
        // Set your ACR login server URL.
        APP_NAME = 'connect4'
        // ACR_LOGIN_SERVER = credentials('ACR_LOGIN_SERVER')
        ACR_LOGIN_SERVER = 'jenkinsacr2.azurecr.io'
    }
    
    stages {
        // stage('Checkout') {
        //     steps {
        //         // Checkout code from GitHub. Adjust URL and branch as needed.
        //         git url: 'https://github.com/jmelton15/connect4_with_server.git', branch: 'master'
        //     }
        // }
        stage('Build Docker Image') {
            steps {
                // withCredentials([string(credentialsId: 'ACR_LOGIN_SERVER', variable: 'ACR_LOGIN_SERVER')]) {
                //     script {
                //         // Build Docker image and tag it using the ACR login server and build number.
                //         dockerImage = docker.build("${ACR_LOGIN_SERVER}/${env.APP_NAME}:${env.BUILD_VERSION}")
                //     }
                // }
                script {
                    // Build Docker image and tag it using the ACR login server and build number.
                    dockerImage = docker.build("${ACR_LOGIN_SERVER}/${env.APP_NAME}:${env.BUILD_VERSION}")
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                // withCredentials([string(credentialsId: 'ACR_LOGIN_SERVER', variable: 'ACR_LOGIN_SERVER')]) {
                //     script {
                //         // Use the ACR credentials stored in Jenkins (ID: 'ACR_CREDS') to push the image.
                //         docker.withRegistry("https://$ACR_LOGIN_SERVER", 'ACR_CREDS') {
                //             dockerImage.push()
                //         }
                //     }
                // }
                script {
                    // Use the ACR credentials stored in Jenkins (ID: 'ACR_CREDS') to push the image.
                    docker.withRegistry("https://$ACR_LOGIN_SERVER", 'ACR_CREDS') {
                        dockerImage.push()
                    }
                }
            }
        }
    }
}